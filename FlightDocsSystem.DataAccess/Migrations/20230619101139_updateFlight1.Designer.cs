// <auto-generated />
using System;
using FlightDocsSystem.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FlightDocsSystem.DataAccess.Migrations
{
    [DbContext(typeof(FlightDocsSystemContext))]
    [Migration("20230619101139_updateFlight1")]
    partial class updateFlight1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FlightDocsSystem.Model.Models.Aircraft", b =>
                {
                    b.Property<int>("AircraftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("aircraft_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AircraftId"));

                    b.Property<string>("AircraftNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("aircraft_number");

                    b.Property<int?>("AircraftTypeId")
                        .HasColumnType("int")
                        .HasColumnName("aircraft_type_id");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("create_at");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("update_at");

                    b.HasKey("AircraftId")
                        .HasName("PK__Aircraft__04015399FA3E6786");

                    b.HasIndex("AircraftTypeId");

                    b.ToTable("Aircrafts");
                });

            modelBuilder.Entity("FlightDocsSystem.Model.Models.AircraftType", b =>
                {
                    b.Property<int>("AircraftTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("aircraft_type_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AircraftTypeId"));

                    b.Property<string>("AircraftTypeName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("aircraft_type_name");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("create_at");

                    b.Property<string>("Manufacturer")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("manufacturer");

                    b.Property<int?>("SeatingCapacity")
                        .HasColumnType("int")
                        .HasColumnName("seating_capacity");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("update_at");

                    b.HasKey("AircraftTypeId");

                    b.ToTable("AircraftTypes");
                });

            modelBuilder.Entity("FlightDocsSystem.Model.Models.Airport", b =>
                {
                    b.Property<int>("AirportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("airport_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AirportId"));

                    b.Property<string>("AirportCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("airport_code");

                    b.Property<string>("AirportName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("airport_name");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("country");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("create_at");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("update_at");

                    b.HasKey("AirportId")
                        .HasName("PK__Airports__C795D516759AC957");

                    b.ToTable("Airports");
                });

            modelBuilder.Entity("FlightDocsSystem.Model.Models.Document", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("document_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentId"));

                    b.Property<string>("CoverPath")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("cover_path");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("create_at");

                    b.Property<string>("DocumentName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("document_name");

                    b.Property<string>("DocumentPath")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("document_path");

                    b.Property<int?>("DocumentTypeId")
                        .HasColumnType("int")
                        .HasColumnName("document_type_id");

                    b.Property<string>("DocumentVersion")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("document_version");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("date")
                        .HasColumnName("expiration_date");

                    b.Property<int?>("FlightId")
                        .HasColumnType("int")
                        .HasColumnName("flight_id");

                    b.Property<bool?>("IsConfirm")
                        .HasColumnType("bit");

                    b.Property<int?>("PassengerId")
                        .HasColumnType("int")
                        .HasColumnName("passenger_id");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("update_at");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("DocumentId")
                        .HasName("PK__Document__9666E8AC859AE755");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("FlightId");

                    b.HasIndex("PassengerId");

                    b.HasIndex("UserId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("FlightDocsSystem.Model.Models.Flight", b =>
                {
                    b.Property<int>("FlightId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("flight_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FlightId"));

                    b.Property<int?>("AircraftId")
                        .HasColumnType("int")
                        .HasColumnName("aircraft_id");

                    b.Property<int?>("ArrivalAirportId")
                        .HasColumnType("int")
                        .HasColumnName("arrival_airport_id");

                    b.Property<DateTime?>("ArrivalTime")
                        .HasColumnType("datetime")
                        .HasColumnName("arrival_time");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("create_at");

                    b.Property<int?>("DepartureAirportId")
                        .HasColumnType("int")
                        .HasColumnName("departure_airport_id");

                    b.Property<DateTime?>("DepartureTime")
                        .HasColumnType("datetime")
                        .HasColumnName("departure_time");

                    b.Property<string>("FlightNumber")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("flight_number");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("update_at");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("FlightId")
                        .HasName("PK__Flights__E3705765106FACBE");

                    b.HasIndex("AircraftId");

                    b.HasIndex("ArrivalAirportId");

                    b.HasIndex("DepartureAirportId");

                    b.HasIndex("UserId");

                    b.ToTable("Flights");
                });

            modelBuilder.Entity("FlightDocsSystem.Model.Models.FlightDocumentType", b =>
                {
                    b.Property<int>("DocumentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("document_type_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentTypeId"));

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("create_at");

                    b.Property<string>("DocumentTypeName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("document_type_name");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("update_at");

                    b.HasKey("DocumentTypeId");

                    b.ToTable("FlightDocumentTypes");
                });

            modelBuilder.Entity("FlightDocsSystem.Model.Models.GroupPermission", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("group_id");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("create_at");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("int")
                        .HasColumnName("document_id");

                    b.Property<string>("GroupName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("group_name");

                    b.Property<int?>("PermissionId")
                        .HasColumnType("int")
                        .HasColumnName("permission_id");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("update_at");

                    b.HasKey("GroupId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("Group_permission", (string)null);
                });

            modelBuilder.Entity("FlightDocsSystem.Model.Models.Passenger", b =>
                {
                    b.Property<int>("PassengerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("passenger_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PassengerId"));

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("create_at");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("first_name");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("gender");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("last_name");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("update_at");

                    b.HasKey("PassengerId")
                        .HasName("PK__Passenge__03764586308DB9B2");

                    b.ToTable("Passengers");
                });

            modelBuilder.Entity("FlightDocsSystem.Model.Models.Permission", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("permission_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PermissionId"));

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("create_at");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("note");

                    b.Property<string>("PermissionName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("permission_name");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("update_at");

                    b.HasKey("PermissionId");

                    b.ToTable("Permission", (string)null);
                });

            modelBuilder.Entity("FlightDocsSystem.Model.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("create_at");

                    b.Property<string>("RoleName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("role_name");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("update_at");

                    b.HasKey("RoleId")
                        .HasName("PK__Roles__760965CC06F59FD5");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("FlightDocsSystem.Model.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("address");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("create_at");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("group_id");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("isActive");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("password");

                    b.Property<string>("PasswordResetToken")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(N'')");

                    b.Property<string>("Phone")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("phone");

                    b.Property<string>("RefreshToken")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(N'')");

                    b.Property<DateTime?>("RefreshTokenCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("('0001-01-01T00:00:00.0000000')");

                    b.Property<DateTime?>("RefreshTokenExpries")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("('0001-01-01T00:00:00.0000000')");

                    b.Property<DateTime?>("ResetTokenExpries")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("update_at");

                    b.Property<string>("UserImage")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("userImage");

                    b.Property<string>("Username")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("username");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerifyAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId")
                        .HasName("PK__Users__B9BE370F2CF8CC80");

                    b.HasIndex("GroupId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FlightDocsSystem.Model.Models.Aircraft", b =>
                {
                    b.HasOne("FlightDocsSystem.Model.Models.AircraftType", "AircraftType")
                        .WithMany("Aircraft")
                        .HasForeignKey("AircraftTypeId")
                        .HasConstraintName("FK_Aircrafts_AircraftTypes");

                    b.Navigation("AircraftType");
                });

            modelBuilder.Entity("FlightDocsSystem.Model.Models.Document", b =>
                {
                    b.HasOne("FlightDocsSystem.Model.Models.FlightDocumentType", "DocumentType")
                        .WithMany("Documents")
                        .HasForeignKey("DocumentTypeId")
                        .HasConstraintName("FK_Documents_FlightDocumentTypes");

                    b.HasOne("FlightDocsSystem.Model.Models.Flight", "Flight")
                        .WithMany("Documents")
                        .HasForeignKey("FlightId")
                        .HasConstraintName("FK__Documents__fligh__44FF419A");

                    b.HasOne("FlightDocsSystem.Model.Models.Passenger", "Passenger")
                        .WithMany("Documents")
                        .HasForeignKey("PassengerId")
                        .HasConstraintName("FK_Documents_Passengers");

                    b.HasOne("FlightDocsSystem.Model.Models.User", "User")
                        .WithMany("Documents")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Documents_Users");

                    b.Navigation("DocumentType");

                    b.Navigation("Flight");

                    b.Navigation("Passenger");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlightDocsSystem.Model.Models.Flight", b =>
                {
                    b.HasOne("FlightDocsSystem.Model.Models.Aircraft", "Aircraft")
                        .WithMany("Flights")
                        .HasForeignKey("AircraftId")
                        .HasConstraintName("FK__Flights__aircraf__3C69FB99");

                    b.HasOne("FlightDocsSystem.Model.Models.Airport", "ArrivalAirport")
                        .WithMany("FlightArrivalAirports")
                        .HasForeignKey("ArrivalAirportId")
                        .HasConstraintName("FK_Flights_Airports1");

                    b.HasOne("FlightDocsSystem.Model.Models.Airport", "DepartureAirport")
                        .WithMany("FlightDepartureAirports")
                        .HasForeignKey("DepartureAirportId")
                        .HasConstraintName("FK_Flights_Airports");

                    b.HasOne("FlightDocsSystem.Model.Models.User", "User")
                        .WithMany("Flights")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Flights_Users");

                    b.Navigation("Aircraft");

                    b.Navigation("ArrivalAirport");

                    b.Navigation("DepartureAirport");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlightDocsSystem.Model.Models.GroupPermission", b =>
                {
                    b.HasOne("FlightDocsSystem.Model.Models.Document", "Document")
                        .WithMany("GroupPermissions")
                        .HasForeignKey("DocumentId")
                        .HasConstraintName("FK_Group_permission_Documents");

                    b.HasOne("FlightDocsSystem.Model.Models.Permission", "Permission")
                        .WithMany("GroupPermissions")
                        .HasForeignKey("PermissionId")
                        .HasConstraintName("FK_Group_permission_Permission");

                    b.HasOne("FlightDocsSystem.Model.Models.Role", "Role")
                        .WithMany("GroupPermissions")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_Group_permission_Roles");

                    b.Navigation("Document");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("FlightDocsSystem.Model.Models.User", b =>
                {
                    b.HasOne("FlightDocsSystem.Model.Models.GroupPermission", "Group")
                        .WithMany("Users")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("FK_Users_Group_permission");

                    b.HasOne("FlightDocsSystem.Model.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_Users_Roles");

                    b.Navigation("Group");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("FlightDocsSystem.Model.Models.Aircraft", b =>
                {
                    b.Navigation("Flights");
                });

            modelBuilder.Entity("FlightDocsSystem.Model.Models.AircraftType", b =>
                {
                    b.Navigation("Aircraft");
                });

            modelBuilder.Entity("FlightDocsSystem.Model.Models.Airport", b =>
                {
                    b.Navigation("FlightArrivalAirports");

                    b.Navigation("FlightDepartureAirports");
                });

            modelBuilder.Entity("FlightDocsSystem.Model.Models.Document", b =>
                {
                    b.Navigation("GroupPermissions");
                });

            modelBuilder.Entity("FlightDocsSystem.Model.Models.Flight", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("FlightDocsSystem.Model.Models.FlightDocumentType", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("FlightDocsSystem.Model.Models.GroupPermission", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("FlightDocsSystem.Model.Models.Passenger", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("FlightDocsSystem.Model.Models.Permission", b =>
                {
                    b.Navigation("GroupPermissions");
                });

            modelBuilder.Entity("FlightDocsSystem.Model.Models.Role", b =>
                {
                    b.Navigation("GroupPermissions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("FlightDocsSystem.Model.Models.User", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Flights");
                });
#pragma warning restore 612, 618
        }
    }
}
